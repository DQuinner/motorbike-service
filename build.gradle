buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.38")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0")
    }
}

plugins {
    id "java"
    id "jacoco"
    id "org.sonarqube" version "2.6"
    id 'org.springframework.boot' version '2.1.2.RELEASE'
}

apply plugin: 'maven'
apply plugin: "net.serenity-bdd.aggregator"
apply plugin: 'com.palantir.docker'

group 'ie.dq'
version '1.0.1-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

jar {
    baseName = 'motorbike-service'
}

//Test tasks
test {
    filter{
        includeTestsMatching "ie.dq.unit.motorbike.*"
    }
}

task integrationTest(type: Test) {
    filter{
        includeTestsMatching "ie.dq.integration.motorbike.*"
    }
}

task acceptanceTest(type: Test) {
    filter{
        includeTestsMatching "ie.dq.acceptance.motorbike.*"
    }
}

//Docker tasks
task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}
docker {
    name "dquinner/${bootJar.baseName}:${project.version}-"+gitBranch()
    tags "latest"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'dquinner-github'
        property 'sonar.login', System.getenv('SONAR_LOGIN')
        property 'sonar.projectKey', 'DQuinner_motorbike-service'
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = [
                    'ie.dq.motorbike.MotorbikeApp'
            ]
        }
    }
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.1.2.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.2.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.1.2.RELEASE'
    compile group: 'com.h2database', name: 'h2', version: '1.4.197'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.2.RELEASE'
    testCompile group: 'net.serenity-bdd', name: 'serenity-core', version: '2.0.38'
    testCompile group: 'net.serenity-bdd', name: 'serenity-cucumber', version: '1.9.29'
    testCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: '2.0.38'
}

gradle.startParameter.continueOnFailure = true

def testString(){
    return "test"
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch.replace('feature/','')
}
